@page "/usertasks"
@using BlazorAppMaybePoc.Shared
@inject HttpClient Http

<div class="container">
    <h1>User Tasks</h1>
    <div class="mb-3">
        <label for="userId" class="form-label">User ID:</label>
        <input id="userId" @bind="_userId" type="text" class="form-control" style="width:auto; display:inline-block;"/>
        <button @onclick="LoadTasks" class="btn btn-primary">Load Tasks</button>
    </div>

    <div class="mt-4">
        <h2>Add New Task</h2>
        <EditForm Model="@_formModel" OnValidSubmit="@HandleCreate">
            <div class="form-group">
                <label for="title">Title:</label>
                <InputText id="title" class="form-control" @bind-Value="_formModel.Title"/>
            </div>
            <div class="form-group">
                <label for="description">Description:</label>
                <InputTextArea id="description" class="form-control" @bind-Value="_formModel.Description"/>
            </div>
            <div class="form-group">
                <label for="dueDate">Due Date:</label>
                <InputDate id="dueDate" class="form-control" @bind-Value="_formModel.DueDate"/>
            </div>
            <div class="form-group">
                <label for="status">Status:</label>
                <InputSelect id="status" class="form-control" @bind-Value="_formModel.Status">
                    <option value="@Status.NotStarted">Not Started</option>
                    <option value="@Status.InProgress">In Progress</option>
                    <option value="@Status.Completed">Completed</option>
                </InputSelect>
            </div>
            <button type="submit" class="btn btn-success">Add Task</button>
        </EditForm>
    </div>

    @if (_toDoItems is not null)
    {
        <table class="table table-striped">
            <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>
                    <button class="btn" @onclick="() => SortTasks(nameof(ToDoItem.DueDate))">
                        Due Date
                        <i class="bi @(_primarySortColumn == nameof(ToDoItem.DueDate) ? (_sortAscending ? "bi-chevron-expand" : "bi-chevron-contract") : "bi-sort-alpha-down")"></i>
                    </button>
                </th>
                <th>
                    <button class="btn" @onclick="() => SortTasks(nameof(ToDoItem.Priority))">
                        Priority
                        <i class="bi @(_primarySortColumn == nameof(ToDoItem.Priority) ? (_sortAscending ? "bi-chevron-expand" : "bi-chevron-contract") : "bi-sort-alpha-down")"></i>
                    </button>
                </th>
                <th>
                    <button class="btn" @onclick="() => SortTasks(nameof(ToDoItem.Status))">
                        Status
                        <i class="bi @(_primarySortColumn == nameof(ToDoItem.Status) ? (_sortAscending ? "bi-chevron-expand" : "bi-chevron-contract") : "bi-sort-alpha-down")"></i>
                    </button>
                </th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in _toDoItems)
            {
                <tr>
                    <td>@item.Title</td>
                    <td>@item.Description</td>
                    <td>@item.DueDate.ToShortDateString()</td>
                    <td>@item.Priority</td>
                    <td>@item.Status</td>
                </tr>
            }
            </tbody>
        </table>
    }
</div>

@code {
    private string _userId = "1";
    private IEnumerable<ToDoItem> _toDoItems;
    private string _primarySortColumn = nameof(ToDoItem.Priority);
    private string _secondarySortColumn = nameof(ToDoItem.DueDate);
    private bool _sortAscending = true;

    private ToDoItemFormModel _formModel = new();

    private Task LoadTasks()
    {
        return SortTasks(_primarySortColumn);
    }

    private Task SortTasks(string column)
    {
        if (_primarySortColumn == column)
        {
            _sortAscending = !_sortAscending;
        }
        else
        {
            _secondarySortColumn = _primarySortColumn;
            _primarySortColumn = column;
            _sortAscending = true;
        }

        return FetchSortedData();
    }

    private async Task FetchSortedData()
    {
        var url = $"ToDoItem/user/{_userId}?primarySortColumn={_primarySortColumn}&secondarySortColumn={_secondarySortColumn}&sortAscending={_sortAscending}";
        var response = await Http.GetAsync(url);
        _toDoItems = await response.Content.ReadFromJsonAsync<IEnumerable<ToDoItem>>();
    }

    private async Task HandleCreate()
    {
        var newToDoItem = new ToDoItem
        {
            Title = _formModel.Title,
            Description = _formModel.Description,
            DueDate = _formModel.DueDate,
            Priority = _formModel.Priority,
            Status = _formModel.Status
        };

        var response = await Http.PostAsJsonAsync("ToDoItem", newToDoItem);
        if (response.IsSuccessStatusCode)
        {
            _formModel = new ToDoItemFormModel();
            await LoadTasks();
        }
    }

    private class ToDoItemFormModel
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime DueDate { get; set; } = DateTime.Now;
        public Priority Priority { get; set; } = Priority.Low;
        public Status Status { get; set; } = Status.NotStarted;
    }

}